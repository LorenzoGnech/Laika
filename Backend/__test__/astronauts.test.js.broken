const request  = require('supertest');
const jwt      = require('jsonwebtoken');

describe('GET methods for astronauts', () =>
{
    let server;

    beforeEach( () => {
        server = require('../app').listen(3000, () => {} );
    });

    afterEach( (done) => {
        server.close(done);
    });

    test('GET /api/v1/astronauts', async () => {
        const response = await request(server).get('/api/v1/astronauts');

        expect(response.status).toBe(200);
        expect(response.body).toBeDefined();
    });
});

describe('Unsafe methods for astronauts', () => 
{
    let token = jwt.sign(
        {email: 'mock@email.dumb'},
        process.env.ACCESS_TOKEN_SECRET,
        {expiresIn: 100000000000}
    );

    // TESTS: if user is logged in, if request has correct form
    describe('POST methods for astronauts', () => 
    {
        let server;

        beforeEach( () => {
            server = require('../app').listen(3000, () => {} );
        });

        afterEach( (done) => {
            server.close(done);
        });

        test('POST /api/v1/astronauts without a logged user', () =>
        {
            return request(server)
                .post('/api/v1/astronauts')
                .set('Accept', 'application/json')
                .expect(401, { error: 'No token provided.' });
        });

        test('POST /api/v1/astronauts with incorrect astronaut', () =>
        {
            let astronaut = { name: "gianni", errori: "di scrittura" };

            return request(server)
                .post('/api/v1/astronauts')
                .set('Accept', 'application/json')
                .set('x-access-token', token)
                .send(astronaut)
                .expect(400, { error: 'Object sent is not an astronaut.' });
        });
    });

    // TESTS: if user is logged in, if request has correct form
    describe('PUT method for astronauts', () =>
    {
        let server;

        beforeEach( () => {
            server = require('../app').listen(3000, () => {} );
        });

        afterEach( (done) => {
            server.close(done);
        });

        test('PUT /api/v1/astronauts without a logged user', () =>
        {
            return request(server)
                .put('/api/v1/astronauts')
                .set('Accept', 'application/json')
                .expect(401, { error: 'No token provided.' });
        });
        /*
        test('PUT /api/v1/astronauts with incorrect astronaut', () =>
        {
            return request(server)
                .put('/api/v1/astronauts')
                .set('Accept', 'application/json')
                .set('x-access-token', token)
                .send({ name: "gianni", errori: "di scrittura" })
                .expect(400, { error: 'Object sent is not an astronaut.' });
        }); */
    });

    // TESTS: if user is logged in, if request has correct form
    describe('DELETE method for astronauts', () =>
    {
        let server;

        beforeEach( () => {
            server = require('../app').listen(3000, () => {} );
        });

        afterEach( (done) => {
            server.close(done);
        });

        test('DELETE /api/v1/astronauts without a logged user', () =>
        {
            return request(server)
                .delete('/api/v1/astronauts')
                .set('Accept', 'application/json')
                .expect(401, { error: 'No token provided.' });
        });
        /*
        test('DELETE /api/v1/astronauts with incorrect astronaut', () =>
        {
            return request(server)
                .delete('/api/v1/astronauts')
                .set('Accept', 'application/json')
                .set('x-access-token', token)
                .send({ name: "gianni", errori: "di scrittura" })
                .expect(400, { error: 'Object sent is not an astronaut.' });
        }); */
    });
});